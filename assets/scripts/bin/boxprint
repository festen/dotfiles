#!/usr/bin/env zsh

# variables
version=1.1.0
name=$(basename $0)
bin=$(dirname $0)
reprint_hysteresis=1 # number of lines to overwrite with blanks
default=success # default message (do not forget to update help function)

# dependencies
. $bin/util/load-dep pipeable $0 $@

# print functions
boxprint-success() { -print "$GREEN" '✓' "$@" }
boxprint-fail()    { -print "$RED" '✗' "$@" }
boxprint-info()    { -print "$BLUE" '?' "$@" }
boxprint-running() { -print "$BLUE" '>' "$@" }
boxprint-user()    { -print "$YELLOW" '~' "$@" }
boxprint-warn()    { -print "$YELLOW" '⚠' "$@" }
boxprint-empty()   { -print '' ' ' "$@" }

# other functions
-print() {
    test "$overwrite" = 'true' && tput cuu 1 && tput el
    color="$1"
    content="$2"
    shift 2
    echo "$color$content$RESET $@"
}
-error() {
    err='Unknown error'
    case "$1" in
        args) err="Missing argument for $2";;
        unknown_type) err="Unknown type: $2";;
        flag) err="Unknown argument $2";;
    esac
    echo ${RED}Error: $err$RESET; -help; exit 1
}
-is-valid-type() {
    type "boxprint-$1" | grep -q 'shell function'
}
-help() {
    echo "Usage: $name [OPTION] <msg>"
    echo 'Prints formatted message. Can be pipe-feeded.'
    echo "Example: $name -t success 'We did it!'"
    echo
    echo "  -h, --help        Display this help message."
    echo "  -o, --overwrite   If set, overwrites previous message"
    echo "  -t, --type=TYPE   Display a message of the given type."
    echo "                    TYPE is one of following: info, user, success, warn"
    echo "                    fail, empty, running. Default: success"
    echo "  -v, --version     Display current version of this program."
}

# read the options
cmd=$default
set -- $(echo $@ | tr '=' ' ')
while [ "${1:0:1}" = '-' ]; do
    case "$1" in
        -h|--help) -help; exit;;
        -o|--overwrite) overwrite=true; shift;;
        -t|--type)
            test -z "$2" && -error args "$1"
            -is-valid-type "$2" || -error unknown_type "$2"
            cmd="$2"
            shift 2
            ;;
        -v|--version) echo $version; exit;;
        *)
            if [ "${#1}" -gt 2 ] && ! [ "${1:1:1}" = '-' ]; then
                set -- -${1:1:1} -${1:2} ${@:2}
            else
                -error flag "$1"
            fi
            ;;
    esac
done


# execute chosen option
eval "boxprint-$cmd" $@
