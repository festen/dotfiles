#!/usr/bin/env python3
import sys
import re
from datetime import datetime
from subprocess import Popen, PIPE
from typing import List

# Verbosity flag
verbose = False

# Local constants
LOCAL = '/tmp/com.festen.checkMovies'

# Remote constants
REMOTE_ROOT = '/home/torrent'
REMOTE_COMPLETED = REMOTE_ROOT + '/Downloads/Completed'
SHARED = REMOTE_ROOT + '/Movies'
SSH_USER = 'torrent'
SSH_SERVER = 'server.local'

# Commands
CMD_FIND_COMPLETED = 'find {completed} -type f -regex ".*\(mkv\|mp4\|m4v\|avi\)" ! -regex ".*\(AppleDouble\).*" ' \
                     '! -regex ".*\(sample\).*"'.format(completed=REMOTE_COMPLETED)


class Logger(object):

    @staticmethod
    def log(value: str):
        print(datetime.now().strftime('[%Y-%m-%d %H:%M:%S] ') + value)

    @staticmethod
    def log_file(value: str):
        value = value.split('/')[-1].split('.')[0].replace('\ ', ' ')
        Logger.log(value)

    @staticmethod
    def log_converted(in_file: str, out_file: str):
        in_ext = in_file.rsplit('.', 1)[1]
        out_ext = out_file.rsplit('.', 1)[1]
        value = in_file.split('/')[-1].split('.')[0].replace('\ ', ' ')
        value = value + ' ({a} -> {b})'.format(a=in_ext, b=out_ext)
        Logger.log(value)


class Local(object):

    @staticmethod
    def download(files: List[str]) -> List[str]:
        items = [':' + item for item in files]
        Bash.execute('mkdir -p {root}'.format(root=LOCAL))
        # noinspection SpellCheckingInspection
        Bash.execute('rsync -rltgovzhpDs {user}@{server}{items} {dest}/'.format(user=SSH_USER,
                                                                                server=SSH_SERVER,
                                                                                items=' '.join(items),
                                                                                dest=LOCAL))
        return [LOCAL + '/' + file.split('/')[-1] for file in files]

    @staticmethod
    def upload(files: List[str]) -> List[str]:
        # noinspection SpellCheckingInspection
        Bash.execute('rsync -rltgovzhpDs {files} {user}@{server}:{remote_dir}'.format(user=SSH_USER,
                                                                                      server=SSH_SERVER,
                                                                                      files=' '.join(files),
                                                                                      remote_dir=SHARED))
        return [SHARED + '/' + file.split('/')[-1] for file in files]

    @staticmethod
    def clean():
        Bash.execute('rm -rf ' + LOCAL)

    @staticmethod
    def convert(files: List[str], to: str) -> List[str]:
        converted = []
        for in_file in files:
            out_file = in_file.rsplit('.', 1)[0] + '.' + to
            Logger.log_converted(in_file, out_file)
            if in_file != out_file:
                Bash.execute('/usr/local/bin/HandBrakeCLI --preset="High Profile" -i {input} -o {output}'
                             .format(input=in_file, output=out_file))
            converted.append(out_file)
        return converted


class Server(object):

    @staticmethod
    def get_completed_movies() -> List[str]:
        result = Bash.execute_remotely(CMD_FIND_COMPLETED)
        files = list(filter(None, result.split('\n')))
        return files

    @staticmethod
    def move_to_shared_folder(files: List[str]) -> List[str]:
        for file in files:
            Logger.log_file(file)
        Bash.execute_remotely('mv {files} {shared}'.format(files=' '.join(files), shared=SHARED))
        return [SHARED + '/' + file.split('/')[-1] for file in files]

    @staticmethod
    def rename_file(old: str, new: str) -> str:
        Bash.execute_remotely('mv {old} {new}'.format(old=old, new=new))
        return new

    @staticmethod
    def clean():
        Bash.execute_remotely('rm -rf {completed}/*'.format(completed=REMOTE_COMPLETED))
        Bash.execute_remotely('find ' + SHARED + ' -type f -name ".*" -print -exec rm -rf {} \;')
        Bash.execute_remotely('find ' + SHARED + ' -type d -name ".*" -print -exec rm -rf {} \;')
        Bash.execute_remotely('find ' + SHARED + ' -empty -type d -delete')
        pass

    @staticmethod
    def fix_permissions():
        Bash.execute_remotely('chown -R torrent:torrent {folder}'.format(folder=SHARED))
        Bash.execute_remotely('find ' + SHARED + ' -type d -exec chmod 0777 {} +')
        Bash.execute_remotely('find ' + SHARED + ' -type f -exec chmod 0777 {} +')

    @staticmethod
    def aggregate_files(n: int = 3):
        cmd = 'find {location} -type f -name "*.mp4" -o -type f -name "*.mkv" -o -type f -name "*.avi"'
        result = Bash.execute_remotely(cmd.format(location=SHARED))
        files = list(filter(None, result.split('\n')))
        files = [file.split('/')[-1] for file in files]
        series = dict()

        # Loop and count files per series
        for file in files:
            """:type:str"""
            key = None
            if '-' in file:
                key = file.split(' - ', 1)[0]
            else:
                key = file.rsplit(' ', 1)[0]
            if key not in series.keys():
                series[key] = 1
            else:
                series[key] += 1

        # Loop over series count
        #   put in own dir when >= join
        #   put in root dir when <= split
        for name, num in series.items():
            escaped_name = MovieParser.escape(name)
            if num >= n:
                Server.put_series_in_own_directory(escaped_name)
            else:
                Server.put_in_root_directory(escaped_name)

        Server.fix_permissions()

    @staticmethod
    def put_series_in_own_directory(name: str):
        Server.put_in_root_directory(name)
        Bash.execute_remotely('mkdir -p {dir}'.format(dir=SHARED + '/' + name))
        Bash.execute_remotely('mv {dir}/{name}\ *.* {dir}/{name}'.format(dir=SHARED, name=name))

    @staticmethod
    def put_in_root_directory(name: str):
        result = Bash.execute_remotely('find {path} -type f -name "{name}*"'.format(path=SHARED, name=name))
        files = list(filter(None, result.split('\n')))
        files = [MovieParser.escape(file) for file in files]
        Bash.execute_remotely('mv {files} {dir}'.format(files=' '.join(files), dir=SHARED))
        Bash.execute_remotely('rmdir {dir}'.format(dir=SHARED + '/' + name))


class Bash(object):

    @staticmethod
    def execute(cmd: str) -> str:
        if verbose:
            Logger.log('\t\t' + cmd)
        return Bash.command(cmd, return_output=True)[0].decode("utf-8")

    @staticmethod
    def execute_remotely(cmd: str) -> str:
        remote = "ssh {user}@{server} '{cmd}'".format(user=SSH_USER, server=SSH_SERVER, cmd=cmd)
        return Bash.execute(remote)

    @staticmethod
    def command(cmd, return_output=False, print_exception=True):
        # Returns (stdout, stderr), raises error on non-zero return code
        # Note: by using a list here (['bash', ...]) you avoid quoting issues, as the
        # arguments are passed in exactly this order (spaces, quotes, and newlines won't
        # cause problems):
        p = Popen(['/bin/sh', '-c', cmd], stdout=PIPE, stderr=PIPE)
        if return_output:
            stdout, stderr = p.communicate()
            if p.returncode and print_exception:
                'exception!\ncode: %s\nstdout: %s\nstderr: %s\ncmd: %s'.format(p.returncode, stdout, stderr, cmd)
            return stdout, stderr


class Stream(object):
    def __init__(self, files: List[str]):
        self.files = files

    def rename(self):
        new_files = []
        for file in self.files:
            parser = MovieParser(file)
            new = Server.rename_file(MovieParser.escape(file), parser.parse())
            new_files.append(new)
        self.files = new_files
        return self

    def clean_server(self):
        Server.clean()
        return self

    def clean_local(self):
        Local.clean()
        return self

    def fix_permissions(self):
        Server.fix_permissions()
        return self

    def reset_filters(self):
        self.files = Server.get_completed_movies()
        return ServerStream(self.files)

    @staticmethod
    def select(suffix):
        stream = Stream.select_all()
        stream.files = [file for file in stream.files if file.endswith(suffix)]
        return stream

    @staticmethod
    def select_all():
        return ServerStream(Server.get_completed_movies())

    @staticmethod
    def select_all_but(suffix):
        stream = Stream.select_all()
        stream.files = [file for file in stream.files if not file.endswith(suffix)]
        return stream


class ServerStream(Stream):
    def move_to_shared_folder(self):
        self.files = Server.move_to_shared_folder(self.files)
        return self

    def download(self):
        self.files = Local.download(self.files)
        return LocalStream(self.files)


class LocalStream(Stream):
    def upload(self):
        self.files = Local.upload(self.files)
        return ServerStream(self.files)

    def convert(self, to):
        self.files = Local.convert(self.files, to)
        return self


class MovieParser(str):
    """Helper class to extract properties from raw movie string

    """

    def parse(self) -> str:
        title = self.title()
        path = self.full_path()
        ext = self.extension()
        return MovieParser.escape(path) + MovieParser.escape(title) + '.' + ext

    def file_name(self):
        return self.split('/')[-1]

    def full_path(self):
        return '/'.join(self.split('/')[:-1]) + '/'

    def extension(self):
        return self.lower().split('.')[-1]

    def title(self):
        file_name = self.file_name()
        title_parts = re.split(r's[0-9]{2}e[0-9]{2}', file_name, 0, re.I | re.M)
        if len(title_parts) != 2:
            title_parts = re.split(r'[0-9]{4}\.[0-9]{2}\.[0-9]{2}', file_name)
        if len(title_parts) != 2:
            title_parts = re.split(r'2[0-9]{3}', file_name)
        if len(title_parts) != 2:
            title_parts = re.split(r'[0-9]{3}', file_name)
        if len(title_parts) <= 1:
            title_parts = ['.'.join(file_name.split('.')[:-1])]
        title = title_parts[0].replace('.', ' ').replace('(', '').replace(')', '').title().strip()
        episode = self.episode()
        return title if not episode else ' '.join([title, episode])

    def episode(self):
        file_name = self.file_name()
        session_re = re.search(r's[0-9]{2}', file_name, re.I | re.M)
        episode_re = re.search(r'e[0-9]{2}', file_name, re.I | re.M)
        combo_re = re.search(r'[0-9]{3}', file_name, re.I | re.M)
        ymd_re = re.search(r'2[0-9]{3}\.[0-9]{2}\.[0-9]{2}', file_name)
        year_re = re.search(r'2[0-9]{3}', file_name)
        episode = None
        if session_re and episode_re:
            sz = int(session_re.group()[1:])
            ep = int(episode_re.group()[1:])
            episode = 'S{:02d}E{:02d}'.format(sz, ep)
        elif combo_re:
            sz = int(combo_re.group()[0])
            ep = int(combo_re.group()[1:])
            episode = 'S{:02d}E{:02d}'.format(sz, ep)
        elif ymd_re:
            ymd_str = ymd.group().split('.')
            episode = ymd_str[2] + '-' + ymd_str[1] + '-' + ymd_str[0]
        elif year_re:
            episode = '(' + year_only.group() + ')'
        return episode

    @staticmethod
    def escape(unescaped) -> str:
        return unescaped.replace(' ', '\\ ').replace('(', '\\(').replace(')', '\\)')


if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '-v':
        verbose = True

    Logger.log('Checking Movies')

    Stream\
        .select('mp4')\
        .rename()\
        .move_to_shared_folder()\
        .select_all_but('mp4')\
        .rename()\
        .download()\
        .clean_server()\
        .convert('mp4')\
        .upload()\
        .clean_server()\
        .clean_local()

    Server.aggregate_files()
